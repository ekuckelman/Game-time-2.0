/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;
/******/
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

	const canvas = document.getElementById('game');
	const context = canvas.getContext('2d');
	const Game = __webpack_require__(1);
	const startButton = document.querySelector('.start');
	const winVideo = document.querySelector('.video');
	const restartButton = document.querySelector('.reStart');
	const levelNum = document.querySelector('.level');
	let startScreen = document.querySelector('.start-screen');
	let newGame = new Game();
	let audio = new Audio('./images/Bomb+2.mp3');
	let audio2 = new Audio('./images/Power Failure-SoundBible.com-1821346166.mp3');
	let audio3 = new Audio('./images/ragnarok_-_level_up.mp3');
	let audio4 = new Audio('images/fail-trombone-01.mp3');
	let rightPressed;
	let leftPressed;
	
	winVideo.addEventListener('click', restartGame);
	startButton.addEventListener('click', startGame);
	restartButton.addEventListener('click', restartGame);
	document.addEventListener('keydown', e => keyDown(e), false);
	document.addEventListener('keyup', e => keyUp(e), false);
	
	const keyDown = e => {
	  if (e.keyCode === 39) {
	    rightPressed = true;
	  } else if (e.keyCode === 37) {
	    leftPressed = true;
	  }
	};
	
	const keyUp = e => {
	  if (e.keyCode === 39) {
	    rightPressed = false;
	  } else if (e.keyCode === 37) {
	    leftPressed = false;
	  }
	};
	
	function startGame() {
	  startScreen.classList.add('start-game');
	  gameLoop();
	}
	
	function restartGame() {
	  window.location.reload(true);
	}
	
	function gameLoop() {
	  context.clearRect(0, 0, canvas.width, canvas.height);
	  newGame.draw(context);
	  newGame.move(canvas, rightPressed, leftPressed);
	  newGame.collision(audio, audio2);
	  newGame.stats(context);
	  if (gameOver(audio4)) {
	    return;
	  }
	  nextLevel();
	  requestAnimationFrame(gameLoop);
	}
	
	function nextLevel() {
	  if (newGame.newLevel(context)) {
	    levelNum.innerText = `Level ${newGame.level}`;
	    audio3.play();
	    win();
	  }
	}
	
	function win() {
	  if (newGame.level === 3) {
	    winVideo.style.display = 'block';
	    window.cancelAnimationFrame();
	  }
	}
	
	function gameOver() {
	  if (newGame.lives === 0) {
	    let showGameOver = document.querySelector('.show-game-over');
	
	    showGameOver.classList.remove('game-over');
	    audio4.play();
	    return true;
	  }
	}

/***/ }),
/* 1 */
/***/ (function(module, exports, __webpack_require__) {

	const Ball = __webpack_require__(2);
	const Blocks = __webpack_require__(4);
	const Paddle = __webpack_require__(6);
	let newBall = new Ball(150, 135, 12);
	let newBlocks = new Blocks();
	let newPaddle = new Paddle(120, 15);
	
	newBlocks.createBlockArray();
	
	class Game {
	  constructor() {
	    this.scoreCount = 0;
	    this.lives = 3;
	    this.level = 1;
	  }
	
	  draw(context) {
	    newBall.drawBall(context);
	    newBlocks.drawBlocks(context);
	    newPaddle.drawPaddle(context);
	  }
	
	  stats(context) {
	    context.font = '22px Arial';
	    context.fillText(`Score: ${this.scoreCount}`, 10, 18);
	    context.font = '22px Arial';
	    context.fillText(`Lives: ${this.lives}`, 750, 18);
	  }
	
	  move(canvas, rightPressed, leftPressed) {
	    newBall.moveBall(canvas);
	    newPaddle.movePaddle(rightPressed, leftPressed, canvas);
	  }
	
	  collision(audio, audio2) {
	    newBall.ballCollision(newPaddle);
	    if (newBall.gameOver(newPaddle)) {
	      audio2.play();
	      this.lives--;
	      newBall = new Ball(150, 135, 12);
	    }
	    if (newBlocks.blockBallCollision(newBall)) {
	      audio.play();
	      this.scoreCount++;
	    }
	  }
	
	  newLevel(context) {
	    if (newBlocks.blocksCount()) {
	      this.level++;
	      newBall = new Ball(150, 135, 12);
	      newBall.dx++;
	      newBlocks = new Blocks(68, 20);
	      newPaddle = new Paddle(80, 15);
	      newBlocks.createBlockArray();
	      this.draw(context);
	      return true;
	    }
	  }
	}
	
	module.exports = Game;

/***/ }),
/* 2 */
/***/ (function(module, exports, __webpack_require__) {

	const Gamepieces = __webpack_require__(3);
	
	class Ball extends Gamepieces {
	  constructor(x, y, radius) {
	    super(x, y);
	    this.radius = radius;
	    this.dx = 4;
	    this.dy = 4;
	    this.color = 'white';
	  }
	
	  drawBall(context) {
	    context.beginPath();
	    context.arc(this.x, this.y, this.radius, 0, 2 * Math.PI, false);
	    context.fillStyle = this.color;
	    context.fill();
	    context.closePath();
	  }
	
	  moveBall(canvas) {
	    if (this.x + this.radius > canvas.width || this.x < 10) {
	      this.dx = -this.dx;
	    }
	    if (this.y + this.radius < 10) {
	      this.dy = -this.dy;
	    }
	    this.x += this.dx;
	    this.y += this.dy;
	    return this;
	  }
	
	  ballCollision(newPaddle) {
	    if (this.x + this.radius > newPaddle.x + 3 && this.x - this.radius - 2 < newPaddle.x + newPaddle.w && this.y + this.radius >= newPaddle.y) {
	      this.dy = -this.dy;
	    }
	  }
	
	  gameOver(newPaddle) {
	    if (this.y - this.radius >= newPaddle.y) {
	      return true;
	    }
	  }
	}
	
	module.exports = Ball;

/***/ }),
/* 3 */
/***/ (function(module, exports) {

	class Gamepieces {
	  constructor(x, y) {
	    this.x = x;
	    this.y = y;
	  }
	}
	
	module.exports = Gamepieces;

/***/ }),
/* 4 */
/***/ (function(module, exports, __webpack_require__) {

	const Block = __webpack_require__(5);
	const newBlock = new Block(68, 20, '#5f7b7d');
	
	class Blocks {
	  constructor() {
	    this.blocksArray = [];
	    this.count = 0;
	  }
	
	  isActive(context, brickX, brickY) {
	    context.beginPath();
	    context.rect(brickX, brickY, newBlock.width, newBlock.height);
	    context.fillStyle = newBlock.color;
	    context.fill();
	    context.closePath();
	  }
	
	  createBlockArray() {
	    for (let c = 0; c < 11; c++) {
	      this.blocksArray[c] = [];
	      for (let r = 0; r < 4; r++) {
	        this.blocksArray[c][r] = {
	          x: 0,
	          y: 0,
	          status: 'active'
	        };
	      }
	    }
	  }
	
	  drawBlocks(context) {
	    for (let c = 0; c < 11; c++) {
	      for (let r = 0; r < 4; r++) {
	        if (this.blocksArray[c][r].status === 'active') {
	          let blockX = c * (newBlock.width + 5) + 20;
	          let blockY = r * (newBlock.height + 5) + 25;
	
	          this.blocksArray[c][r].x = blockX;
	          this.blocksArray[c][r].y = blockY;
	          this.isActive(context, blockX, blockY);
	        }
	      }
	    }
	  }
	
	  blockBallCollision(newBall) {
	    for (let c = 0; c < 11; c++) {
	      for (let r = 0; r < 4; r++) {
	        let eachBlock = this.blocksArray[c][r];
	
	        if (eachBlock.status === 'active') {
	          if (newBall.x > eachBlock.x && newBall.x < eachBlock.x + newBlock.width && newBall.y - newBall.radius < eachBlock.y + newBlock.height && newBall.y - newBall.radius < eachBlock.y + newBlock.height) {
	            newBall.dy = -newBall.dy;
	            eachBlock.status = 'inactive';
	            this.count++;
	            this.blocksCount();
	            return true;
	          }
	        }
	      }
	    }
	  }
	
	  blocksCount() {
	    if (this.count === 44) {
	      return true;
	    }
	  }
	}
	
	module.exports = Blocks;

/***/ }),
/* 5 */
/***/ (function(module, exports) {

	class Block {
	  constructor(w, h, color) {
	    this.width = w;
	    this.height = h;
	    this.color = color;
	  }
	}
	
	module.exports = Block;

/***/ }),
/* 6 */
/***/ (function(module, exports) {

	class Paddle {
	  constructor(w, h) {
	    this.w = w;
	    this.h = h;
	    this.x = 420 - w;
	    this.y = 430 - h;
	    this.color = '#e0afaf';
	  }
	
	  drawPaddle(context) {
	    context.beginPath();
	    context.rect(this.x, this.y, this.w, this.h);
	    context.stroke();
	    context.fillStyle = this.color;
	    context.fill();
	    context.closePath();
	  }
	
	  movePaddle(rightPressed, leftPressed, canvas) {
	    if (rightPressed && this.x < canvas.width - this.w) {
	      this.x += 6;
	    } else if (leftPressed && this.x > 0) {
	      this.x -= 6;
	    }
	  }
	}
	
	module.exports = Paddle;

/***/ })
/******/ ]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,